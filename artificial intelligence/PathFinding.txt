list whitelist 
=[
"724098a3-a3f3-4fe4-8787-80aff7abe5a1",
"ac1316d7-4842-44ff-816a-c6109cf7589b"
];

list Animation=["Aim","Hold","Run","Stand"];

list die_animation=["dead0","dead1"];

float health = 1000;
float despawn = 10; 
move_to(key avatar)
{
    list crux = llGetObjectDetails(avatar, ([OBJECT_POS, OBJECT_VELOCITY]));   
    float dist=llVecDist(llList2Vector(crux,0),llGetPos());     
    dist=llVecDist(llList2Vector(crux,0),llGetPos());
    if(dist>10)
    {
    llSetTimerEvent(0);           
    llStartObjectAnimation(llList2String(Animation,2)); 
    llStartObjectAnimation(llList2String(Animation,1));      
    llStopObjectAnimation(llList2String(Animation,0));
    llStopObjectAnimation(llList2String(Animation,3));
    llCreateCharacter([CHARACTER_DESIRED_SPEED, 6.0, CHARACTER_MAX_SPEED, 6.0]);
    llPursue(avatar, [PURSUIT_OFFSET, <-2.0, 0.0, 0.0>, PURSUIT_FUZZ_FACTOR, 0.2]);   
    }
    else
    {
    float dist=llVecDist(llList2Vector(crux,0),llGetPos());     
    dist=llVecDist(llList2Vector(crux,0),llGetPos()); 
    if(dist>5)
    {   
    llDeleteCharacter();
    llSetTimerEvent(0.01);
    llStopObjectAnimation(llList2String(Animation,2)); 
    llStopObjectAnimation(llList2String(Animation,1));     
    llStartObjectAnimation(llList2String(Animation,0));
    llStartObjectAnimation(llList2String(Animation,3));    
    llSetLinkPrimitiveParamsFast(3,[PRIM_NAME]+(string)avatar);
    }
    else
    {  
    llSetTimerEvent(0);  
    llStartObjectAnimation(llList2String(Animation,2)); 
    llStartObjectAnimation(llList2String(Animation,1));      
    llStartObjectAnimation(llList2String(Animation,0));
    llStopObjectAnimation(llList2String(Animation,3));
    llCreateCharacter([CHARACTER_DESIRED_SPEED,10, CHARACTER_MAX_SPEED,10]);
    llWanderWithin(llGetPos(), <30,30,5>, [WANDER_PAUSE_AT_WAYPOINTS, TRUE]); 
    }
  }
}
no_target()
{
    llDeleteCharacter();
    llStopObjectAnimation(llList2String(Animation,0));
    llStopObjectAnimation(llList2String(Animation,2));     
    llStartObjectAnimation(llList2String(Animation,3));
    llStartObjectAnimation(llList2String(Animation,1));
}
startup()
{
    llSetTimerEvent(0);
    llDeleteCharacter();
    llSetRot(ZERO_ROTATION);
    llSensorRepeat("","",AGENT,50,PI,2); 
    llSetStatus(STATUS_DIE_AT_EDGE,TRUE);
    llStopObjectAnimation(llList2String(Animation,0));
    llStopObjectAnimation(llList2String(Animation,2));     
    llStartObjectAnimation(llList2String(Animation,3));
    llStartObjectAnimation(llList2String(Animation,1));
    llCreateCharacter([]);
}
Dead()
{
        llSensorRemove();   
        llSetTimerEvent(0); 
        llDeleteCharacter();
        llSetLinkPrimitiveParamsFast(4,[PRIM_DESC]+"dead"); 
        llStopObjectAnimation(llList2String(Animation,0));  
        llStopObjectAnimation(llList2String(Animation,1));  
        llStopObjectAnimation(llList2String(Animation,2)); 
        llStopObjectAnimation(llList2String(Animation,3));
        llStartObjectAnimation(llList2String(die_animation,llFloor(llFrand(llGetListLength(die_animation)))));  
        llCreateCharacter([]);
        llSleep(despawn);    
        llDie();
}
aim_target()
{
        list target =llGetLinkPrimitiveParams( 3,[PRIM_NAME]);  
        list crux = llGetObjectDetails(llList2String(target,0), ([OBJECT_POS, OBJECT_VELOCITY]));
        vector ovF = llVecNorm(llList2Vector(crux,0)+(llList2Vector(crux,1)*0)-llGetPos()+(llGetVel()*0.2));
        float u = ovF.x;
        float m = ovF.y;
        float x = ovF.z;  
        llSetLinkPrimitiveParamsFast(2, [PRIM_ROT_LOCAL,llRotBetween(<0,0,1>,<u,m,x>/  llGetLocalRot() )]);
        llRotLookAt(llRotBetween(<1,0,0>,<u,m,0>),0.2,1.0);
        llMessageLinked(2, 0,"shoot","");
}
default
{
    on_rez(integer start_param)
    {
    llResetScript();
    }
    state_entry()
    { 
    startup();
    }
    sensor(integer num_detected)
    {
    if (~llListFindList(whitelist,[(string)llDetectedKey(0)])) 
    { 

    }
    else
    { 
    move_to(llDetectedKey(0));  
    }
    }
    collision_start(integer times)
    {
    float damage = llVecMag(llDetectedVel(0))+llVecMag(llGetVel());
    health = health - damage;
    if(health<=1)
    {
    Dead();
    }
    }
    land_collision_start(vector where)
    {
    
    float damage = llVecMag(llDetectedVel(0))+llVecMag(llGetVel());
    health = health - damage;
    if(health<=1)
    {
    Dead();
    }
    }
    no_sensor() 
    {      
    no_target();
    }
    path_update(integer type, list reserved)
    {
    no_target();
    }
    timer()
    {
    aim_target();
    }
}